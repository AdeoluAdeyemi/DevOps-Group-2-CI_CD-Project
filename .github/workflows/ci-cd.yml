name: Continuous Integration for Python Flask app

#Events
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: tf_govuk_fe_wtf_demo_ecr_repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: tf_govuk_service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: tf_ecs_cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: tf_task_def # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: govuk-fe-wtf-demo           # set this to the name of the container in the
  DOCKER_BUILD_DIR: ./
  DOCKER_FILE: Dockerfile
  BACKEND_S3_BUCKET: govuk-fe-demo-terraform-state-backend
  BACKEND_DYNAMODB_TABLE: terraform_state
  VPC_CIDR_BLOCK: "10.0.0.0/16"
  VPC_SUBNET_MAIN: "10.0.1.0/24"
  VPC_SUBNET_SECONDARY: "10.0.2.0/24"
  VPC_SUBNET_AVAILABILITY_ZONE_1: "eu-west-2a"
  VPC_SUBNET_AVAILABILITY_ZONE_2: "eu-west-2c"
  VPC_GATEWAY_ID: "vgw-062345678"
  VPC_SUBNET_ROUTE_TABLE_CIDR: "0.0.0.0/0"
  VPC_SECURITY_GROUP_INGRESS_CIDR: "0.0.0.0/0"
  VPC_SECURITY_GROUP_EGRESS_CIDR: "0.0.0.0/0"
  PORT: 80
  AWS_ELB_NAME: "tf-lb-test"
  AWS_ELB_TARGET_GROUP: "tf-tg-main"

#Jobs
jobs:
  create:
    name: Create AWS Infrastructure
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      #====================================#
      # Checkout repository into runner
      #====================================#
      - name: Checkout repository
        uses: actions/checkout@v4


      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #======================================#
      # Install Terraform and its dependencies
      #======================================#
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5
          

      # #===================================================================#
      # # Store your Terraform state file as an encrypted Github workflow 
      # # artifact and downloads and decrypts the state on subsequent runs.
      # #===================================================================#
      # - name: Download Terraform state
      #   # uses: devgioele/terraform-state-artifact@v4
      #   # with:
      #   #   passphrase: ${{ secrets.TF_STATE_PASSPHRASE }}
      #   #   download_upload: download

      #   uses: badgerhobbs/terraform-state@v2
      #   with:
      #     encryption_key: ${{ secrets.TF_STATE_PASSPHRASE }}
      #     operation: download
      #     location: artifact
      #     directory: ./
      #     github_token: ${{ secrets.GH_ACCESS_TOKEN }}
      #   continue-on-error: true
        
      # #===================================================================#
      # # Terraform Create S3 and DynamoDB resources for TF state management
      # #===================================================================#
      # - name: Terraform S3 & DynamoDB
      #   id: s3-dynamodb-init 
      #   run: |
      #     terraform init 
          
      #     terraform plan -target=aws_s3_bucket.state_s3_bucket \
      #     -target=aws_s3_bucket_versioning.state_s3_bucket \
      #     -target=aws_dynamodb_table.terraform-lock 
          
      #     terraform apply -target=aws_s3_bucket.state_s3_bucket \
      #     -target=aws_s3_bucket_versioning.state_s3_bucket \
      #     -target=aws_dynamodb_table.terraform-lock \
      #     -auto-approve -no-color 
      #   working-directory: infra/

      #================================#
      # Dynamically create tfvars file
      #================================#
      - name: Generate tfvars file
        id: tfvars
        run: |
          touch prod.tfvars
          echo "aws_region = \"${{ env.AWS_REGION }}\"" >> prod.tfvars
          echo "aws_vpc_cidr_block = \"${{ env.VPC_CIDR_BLOCK }}\"" >> prod.tfvars
          echo "aws_subnet_main_cidr_block = \"${{ env.VPC_SUBNET_MAIN }}\"" >> prod.tfvars
          echo "aws_subnet_secondary_cidr_block = \"${{ env.VPC_SUBNET_SECONDARY }}\"" >> prod.tfvars
          echo "aws_route_table_cidr_block = \"${{ env.VPC_SUBNET_ROUTE_TABLE_CIDR }}\"" >> prod.tfvars
          echo "aws_security_group_ingress_cidr_block = \"${{ env.VPC_SECURITY_GROUP_INGRESS_CIDR }}\"" >> prod.tfvars
          echo "aws_security_group_egress_cidr_block = \"${{ env.VPC_SECURITY_GROUP_EGRESS_CIDR }}\"" >> prod.tfvars
          echo "availability_zones = \"[${{ env.VPC_SUBNET_AVAILABILITY_ZONE_1 }}, ${{ env.VPC_SUBNET_AVAILABILITY_ZONE_2 }}]\"" >> prod.tfvars
          echo "port = \"${{ env.PORT }}\"" >> prod.tfvars
          echo "aws_elb_name = \"${{ env.AWS_ELB_NAME }}\"" >> prod.tfvars
          echo "aws_elb_target_group_name = \"${{ env.AWS_ELB_TARGET_GROUP }}\"" >> prod.tfvars
          echo "aws_ecr_repo_name = \"${{ env.ECR_REPOSITORY }}\"" >> prod.tfvars
          echo "aws_ecs_cluster_name = \"${{ env.ECS_CLUSTER }}\"" >> prod.tfvars
          echo "aws_ecs_name = \"${{ env.ECS_SERVICE }}\"" >> prod.tfvars
          echo "aws_task_def = \"${{ env.ECS_TASK_DEFINITION }}\"" >> prod.tfvars
          echo "aws_ecs_task_df_container_name = \"${{ env.CONTAINER_NAME }}\"" >> prod.tfvars
          echo "dynamodb_hash = \"${{ env.BACKEND_DYNAMODB_TABLE }}\"" >> prod.tfvars
          echo "s3_bucket_name = \"${{ env.BACKEND_S3_BUCKET }}\"" >> prod.tfvars
          echo "dynamodb_table_name = \"${{ env.VPC_SUBNET_MAIN }}\"" >> prod.tfvars

          cat prod.tfvars
        working-directory: infra/

      #=============================#
      # Terraform Init and Validate.
      #=============================#
      - name: Terraform Init
        id: init
        run: |
          terraform init   
          terraform validate -no-color
        working-directory: infra/


      #===================================================#
      # Terraform Plan AWS VPC, & Other Resources Creation
      #===================================================#
      - name: Terraform Plan
        id: plan
        run: terraform plan  -var-file="prod.tfvars" -no-color -lock=false
        working-directory: infra/
        continue-on-error: true


      #===================================================#
      # Terraform Apply Infrastructure Creation
      #===================================================#
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: infra/
        run: terraform apply  -var-file="prod.tfvars" -auto-approve -lock=false

      #==================================================================#
      # Upload Terraform state file as an encrypted Github workflow 
      # artifact and downloads and decrypts the state on subsequent runs 
      #==================================================================#
      # - name: Encrypt and Upload Terraform state
      #   # uses: devgioele/terraform-state-artifact@v4
      #   # with:
      #   #   passphrase: ${{ secrets.TF_STATE_PASSPHRASE }}
      #   #   download_upload: upload

      #   uses: badgerhobbs/terraform-state@v2
      #   with:
      #     encryption_key: ${{ secrets.TF_STATE_PASSPHRASE }}
      #     operation: upload
      #     location: artifact
      #     directory: ./
      #     github_token: ${{ secrets.GH_ACCESS_TOKEN }}

  # build:
  #   name: Build, tag, and push docker image

  #   runs-on: ubuntu-latest
  #   needs: create

  #   steps:


      # #====================================#
      # # Checkout repository into runner
      # #====================================#
      # - name: Checkout repository
      #   uses: actions/checkout@v4


      # #===================================================================#
      # # Store your Terraform state file as an encrypted Github workflow 
      # # artifact and downloads and decrypts the state on subsequent runs.
      # #===================================================================#
      # - name: Download Terraform state
      #   # uses: devgioele/terraform-state-artifact@v4
      #   # with:
      #   #   passphrase: ${{ secrets.TF_STATE_PASSPHRASE }}
      #   #   download_upload: download

      #   uses: badgerhobbs/terraform-state@v2
      #   with:
      #     encryption_key: ${{ secrets.TF_STATE_PASSPHRASE }}
      #     operation: download
      #     location: artifact
      #     directory: ./
      #     github_token: ${{ secrets.GH_ACCESS_TOKEN }}
      #   continue-on-error: true

      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # #======================================#
      # # Install Terraform and its dependencies
      # #======================================#
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3.1.1
      #   with:
      #     terraform_version: 1.8.5

      # #=============================#
      # # Terraform Init and Validate
      # #=============================#
      # - name: Terraform Init
      #   id: init
      #   run: |
      #     terraform init 
      #     terraform validate -no-color
      #   working-directory: infra/

      #========================================#
      # Build docker image 
      # and push to AWS ECR Repo
      #========================================#
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: "latest"
        run: |
          docker build "${{ env.DOCKER_BUILD_DIR }}" -f "${{ env.DOCKER_FILE }}" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


      #========================================#
      # Create ECS Cluster, Task Definition,
      # and Service
      #========================================#      
      - name: Terraform Plan
        id: plan-build
        run: |
          terraform plan  -var-file="prod.tfvars" -no-color
        working-directory: infra/
        continue-on-error: true

        
      #===================================================#
      # Terraform Apply Infrastructure Creation
      #===================================================#
      - name: Terraform Plan Status
        if: steps.plan-build.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply-build
        working-directory: infra/
        run: terraform apply  -var-file="prod.tfvars" -auto-approve
        
      #============================================#
      # Add a comment to the pull request to indicate
      # the task was successful, and provide the 
      # details of the app url
      #============================================#
      # - name: Add comments to the PR
        # uses: actions/github-script@v7
        # if: github.event_name == 'pull_request'
        # env:
        #   PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        # with:
        #   github-token: ${{ secrets.GITHUB_TOKEN }}
        #   script: |
        #     const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
        #     #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
        #     #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
        #     <details><summary>Validation Output</summary>
      
        #     \`\`\`\n
        #     ${{ steps.validate.outputs.stdout }}
        #     \`\`\`
      
        #     </details>
      
        #     #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
      
        #     <details><summary>Show Plan</summary>
      
        #     \`\`\`\n
        #     ${process.env.PLAN}
        #     \`\`\`
      
        #     </details>
      
        #     *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
        #     github.rest.issues.createComment({
        #       issue_number: context.issue.number,
        #       owner: context.repo.owner,
        #       repo: context.repo.repo,
        #       body: output
        #     })

    
      # #==================================================================#
      # # Upload Terraform state file as an encrypted Github workflow 
      # # artifact and downloads and decrypts the state on subsequent runs 
      # #==================================================================#
      # - name: Encrypt and Upload Terraform state
      #   # uses: devgioele/terraform-state-artifact@v4
      #   # with:
      #   #   passphrase: ${{ secrets.TF_STATE_PASSPHRASE }}
      #   #   download_upload: upload

      #   uses: badgerhobbs/terraform-state@v2
      #   with:
      #     encryption_key: ${{ secrets.TF_STATE_PASSPHRASE }}
      #     operation: upload
      #     location: artifact
      #     directory: ./
      #     github_token: ${{ secrets.GH_ACCESS_TOKEN }}